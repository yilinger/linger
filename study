 #include<iostream>
#include<vector>
#include<stack>
#include<queue>

using namespace std;
typedef int type;

struct node{
        type key;
        struct node *left;
        struct node *right;

        //构造函数，初始化链表
        node(type value) :key(value), left(NULL), right(NULL)               
        { }
};
node *root = NULL;        //根节点定义为全局变量

//建立二叉树
void add_tree(type key)
{
        //新建结构体存放key值
        node *tem = new node(key);
        if (root == NULL)
        {
                root = tem;
                return;
        }
        node *no = root;        //将根节点的位置存放起来
        while (no)
        {
                if (key < no->key)
                {
                        if (no->left == NULL)
                        {
                                no->left = tem;
                                return;
                        }
                        no=no->left;
                }
                else
                {
                        if (no->right == NULL)
                        {
                                no->right = tem;
                                return;
                        }
                        no = no->right;
                }
        }
}

////前序打印
//void preorder(node * root)
//{
//        if (root == NULL)
//        {
//                return;
//        }
//        cout << root->key << "        ";
//        preorder(root->left);
//        preorder(root->right);
//}
//
////后序打印
//void postorder(node * root)
//{
//        if (root == NULL)
//        {
//                return;
//        }
//        preorder(root->left);
//        preorder(root->right);
//        cout << root->key << endl;
//}
//
////中序打印
//void inorder(node * root)
//{
//        if (root == NULL)
//        {
//                return;
//        }
//        inorder(root->left);
//        cout << root->key << "        ";
//        inorder(root->right);
//}
//
////前序遍历
//vector<int>pre_order(node *root)
//{
//        stack <node *> stk;
//        vector <type> vec;
//        stk.push(root);
//        node* top = NULL;
//        while (!stk.empty())
//        {
//                top = stk.top();
//                stk.pop();
//                vec.push_back(top->key);
//                if (top->right != NULL)
//                {
//                        stk.push(top->right);
//                }
//                if (top->left != NULL)
//                {
//                        stk.push(top->left);
//                }
//        }
//        return vec;
//}
//
////中序遍历
//vector<int>in_order(node *root)
//{
//        stack <node *> stack;
//        vector <type> vec;
//        node* cur = NULL;
//        cur = root;
//        while (!stack.empty()||cur)
//        {
//                while (cur)
//                {
//                        stack.push(cur);
//                        cur = cur->left;
//                }
//                node * nod =stack.top();
//                vec.push_back(nod->key);
//                stack.pop();
//                cur = nod->right;
//        }
//        return vec;
//}
//
////后序遍历
//void pos_order(node *root,int n)
//{
//        stack <node *> s1;
//        stack <node * > s2;
//        s1.push(root);
//        while (!s1.empty() )
//        {
//                node* cur=s1.top();
//                s2.push(cur);
//                s1.pop();
//                if (cur->left)
//                {
//                        s1.push(cur->left);
//                }
//                if (cur->right)
//                {
//                        s1.push(cur->right);
//                }
//        }
//        for (int i = 0; i < n; i++)
//        {
//                cout << s2.top()->key << "        ";
//                s2.pop();
//        }
//}
//
////打印容器
//void print_vec(vector<int>v1)
//{
//        cout << v1.size() << "aertghj";
//        for (int i = 0; i < v1.size(); i++)
//        {
//                cout << v1[i] << "        ";
//        }
//}
//
//销毁二叉树

//传引用，使用同一块空间，可以销毁，后序遍历销毁
void destroy_tree(node * &root)               
{
        if (root == NULL)
        {
                return;
        }
        destroy_tree(root->left);
        destroy_tree(root->right);
        delete root;
        root = NULL;
}

//层次遍历
void level_order(node *root)
{
        queue<node *>que;
        node *last=root;
        node *nlast=root;
        if (last->left == NULL)
        {
                que.push(last);
        }

}
int main()
{
        int arr[] = { 1, 9, 8, 5, 2, 3, 4, 7, 5, 6 };
        int m = sizeof(arr) / sizeof(int);
        for (int i = 0; i < m; i++)
        {
                add_tree(arr[i]);
        }
        level_order(root);
        cout << endl;

        //destroy_tree(root);        //销毁二叉树
        //preorder(root);                //前序打印
        //inorder(root);                //中序打印
        //postorder(root);                //后序打印
        //vector<type>v1 = pre_order(root);                //前序遍历
        //vector<type>v1 = in_order(root);                //中序遍历
        //pos_order(root,sizeof(arr)/sizeof(int));                //后序遍历
        //print_vec(v1);                //容器打印

        return 0;
}
